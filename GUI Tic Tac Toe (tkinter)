import tkinter as tk
from tkinter import messagebox

#creating class TicTacToe
class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("Tic Tac Toe")
        
        self.current_player = "X"
        self.board = [["" for _ in range(3)] for _ in range(3)]
        
        # Creating buttons
        self.buttons = [[None for _ in range(3)] for _ in range(3)]
        for i in range(3):
            for j in range(3):
                self.buttons[i][j] = tk.Button(root, text="", font=("Arial", 20), width=6, height=3,
                                              command=lambda row=i, col=j: self.on_button_click(row, col))
                self.buttons[i][j].grid(row=i, column=j)
        
        # Creating a restart button
        self.btn_restart = tk.Button(root, text="Restart", font=("Arial", 16), command=self.restart_game)
        self.btn_restart.grid(row=3, columnspan=3, pady=10)
    
    def on_button_click(self, row, col):
        if self.board[row][col] == "":
            self.board[row][col] = self.current_player
            self.buttons[row][col].configure(text=self.current_player)
            
            if self.check_winner(self.current_player):
                messagebox.showinfo("Game Over", f"Player {self.current_player} wins!")
                self.disable_buttons()
            elif self.check_tie():
                messagebox.showinfo("Game Over", "It's a tie!")
                self.disable_buttons()
            else:
                self.toggle_player()
    # We have to check which player wins and there are 3 ways by which we can check
    def check_winner(self, player):
        # Checking rows
        for row in self.board:
            if all(cell == player for cell in row):
                return True
        
        # Checking columns
        for col in range(3):
            if all(self.board[row][col] == player for row in range(3)):
                return True
        
        # Checking diagonals
        if self.board[0][0] == self.board[1][1] == self.board[2][2] == player:
            return True
        if self.board[0][2] == self.board[1][1] == self.board[2][0] == player:
            return True
        
        return False
    
    def check_tie(self):
        return all(all(cell != "" for cell in row) for row in self.board)
    
    def toggle_player(self):
        self.current_player = "O" if self.current_player == "X" else "X"
    
    def disable_buttons(self):
        for row in self.buttons:
            for button in row:
                button.configure(state="disabled")
    
    def restart_game(self):
        self.current_player = "X"
        self.board = [["" for _ in range(3)] for _ in range(3)]
        
        for row in self.buttons:
            for button in row:
                button.configure(text="")
                button.configure(state="normal")

# Create the main window
root = tk.Tk()

# Create an instance of the TicTacToe class
game = TicTacToe(root)

# Start the main event loop
root.mainloop()
